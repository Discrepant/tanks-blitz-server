# protos/CMakeLists.txt
set(PROTO_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/auth_service.proto
)

# Укажите директорию для генерации кода
set(PROTOBUF_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})

# Включите библиотеки Protobuf и gRPC
find_package(Protobuf REQUIRED)
find_package(gRPC CONFIG REQUIRED) # This should define gRPC_GRPC_CPP_PLUGIN_EXECUTABLE

# Генерация Protobuf кода
# protobuf_generate_cpp will generate .pb.cc and .pb.h files
# It sets PROTO_SRCS to the list of generated .pb.cc files
# and PROTO_HDRS to the list of generated .pb.h files.
protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS ${PROTO_FILES})

# Генерация gRPC кода
# The user's feedback defines GRPC_SRCS and GRPC_HDRS to specific file names.
set(GRPC_SRCS ${PROTOBUF_OUTPUT_DIR}/auth_service.grpc.pb.cc)
set(GRPC_HDRS ${PROTOBUF_OUTPUT_DIR}/auth_service.grpc.pb.h)

add_custom_command(
    OUTPUT ${GRPC_SRCS} ${GRPC_HDRS}
    COMMAND ${Protobuf_PROTOC_EXECUTABLE}
    ARGS --grpc_out=${PROTOBUF_OUTPUT_DIR}
         --plugin=protoc-gen-grpc=${gRPC_GRPC_CPP_PLUGIN_EXECUTABLE}
         ${PROTO_FILES} # This is ${CMAKE_CURRENT_SOURCE_DIR}/auth_service.proto
    DEPENDS ${PROTO_FILES}
    COMMENT "Generating gRPC code from auth_service.proto"
    VERBATIM
)

# Создание библиотеки
add_library(proto_lib STATIC
    ${PROTO_SRCS}          # Generated by protobuf_generate_cpp
    ${GRPC_SRCS}           # Generated by add_custom_command
    ${PROTO_HDRS}          # Generated by protobuf_generate_cpp
    ${GRPC_HDRS}           # Output of add_custom_command
)

target_link_libraries(proto_lib PRIVATE
    Protobuf::libprotobuf
    gRPC::grpc++_unsecure
)

target_include_directories(proto_lib PUBLIC
    ${PROTOBUF_OUTPUT_DIR}
)

message(STATUS "Configured proto_lib with custom gRPC generation.")
