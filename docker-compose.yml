networks:
  tanks_blitz_net:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    networks:
      - tanks_blitz_net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    networks:
      - tanks_blitz_net
    depends_on: # Kafka зависит только от Zookeeper для своего запуска
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 60s

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    networks:
      - tanks_blitz_net
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  redis-service:
    image: redis:7-alpine
    container_name: redis-service
    networks:
      - tanks_blitz_net
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  auth_server:
    build:
      context: .
      dockerfile: auth_server/Dockerfile
    image: tank_game_python_auth_grpc_server
    container_name: python_auth_grpc_service
    command: ["python", "-m", "auth_server.auth_grpc_server"]
    networks:
      - tanks_blitz_net
    ports:
      - "50051:50051"
    environment:
      REDIS_HOST: redis-service
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      redis-service:
        condition: service_healthy
      kafka: # auth_server также зависит от Kafka
        condition: service_healthy

  cpp_auth_server:
    build:
      context: .
      dockerfile: cpp/Dockerfile
    image: tank_game_cpp_auth_server_app
    container_name: cpp_auth_tcp_server
    command: ["/opt/auth_server/auth_server_app", "--port", "9000", "--grpc_addr", "auth_server:50051"]
    networks:
      - tanks_blitz_net
    ports:
      - "9000:9000"
    depends_on:
      auth_server:
        condition: service_started # У auth_server нет своего healthcheck
    restart: unless-stopped

  cpp_game_server:
    build:
      context: .
      dockerfile: cpp/Dockerfile
    image: tank_game_cpp_game_server_app
    container_name: cpp_game_server
    command: >
      /opt/game_server/game_server_app
      --tcp_port 8888
      --udp_port 8889
      --rmq_host rabbitmq
      --rmq_port 5672
      --rmq_user user
      --rmq_pass password
      --kafka_brokers kafka:9092
      --auth_grpc_host auth_server
      --auth_grpc_port 50051
    networks:
      - tanks_blitz_net
    ports:
      - "8888:8888"
      - "8889:8889/udp"
    depends_on:
      rabbitmq:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth_server:
        condition: service_started # У auth_server нет своего healthcheck
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    networks:
      - tanks_blitz_net
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      cpp_auth_server: # Зависит от сервисов, которые он должен скрейпить
        condition: service_started
      cpp_game_server:
        condition: service_started
      auth_server:
        condition: service_started

  grafana:
    image: grafana/grafana:10.1.1
    container_name: grafana
    networks:
      - tanks_blitz_net
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on: # Grafana зависит от Prometheus
      prometheus:
        condition: service_started # У Prometheus нет healthcheck по умолчанию

volumes:
  grafana_data: {}
