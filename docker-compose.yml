# docker-compose.yml (в корне проекта)

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092" # Port for internal docker network communication
      - "29092:29092" # Port for host access
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0 # Optional: Speeds up consumer group rebalances for development

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: user # Change as needed
      RABBITMQ_DEFAULT_PASS: password # Change as needed
      RABBITMQ_DEFAULT_LISTENERS: "amqp://0.0.0.0:5672"
      RABBITMQ_DEFAULT_VHOST: "/"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis-service:
    image: redis:alpine
    container_name: redis-service
    ports:
      - "6379:6379"
    restart: unless-stopped

  auth_server:
    build:
      context: .
      dockerfile: Dockerfile
    image: auth_server_image
    container_name: auth_server
    command: auth
    ports:
      - "8888:8888"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      RABBITMQ_HOST: rabbitmq
      REDIS_HOST: redis-service
      # Add other necessary environment variables for auth_server
    depends_on:
      - kafka
      - rabbitmq
      - redis-service
    # volumes:
    #   - ./auth_server:/app # Mount code for development if needed

  game_server:
    build:
      context: .
      dockerfile: Dockerfile
    image: game_server_image
    container_name: game_server
    command: game
    restart: unless-stopped
    ports:
      - "8001:8001" # Example port
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      REDIS_HOST: redis-service
      AUTH_SERVER_HOST: auth_server
      AUTH_SERVER_PORT: 8888
      # Add other necessary environment variables for game_server
    depends_on:
      kafka:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      redis-service:
        condition: service_started
      auth_server:
        condition: service_started
    # volumes:
    #   - ./game_server:/app # Mount code for development if needed

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    # network_mode: host # Раскомментировать для Linux, если Prometheus в Docker, а сервисы на localhost хоста

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin # Изменить на более безопасный
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    # network_mode: host # Если Grafana должна быть в той же сети, что и Prometheus (host)

volumes:
  grafana_data: {}

# Примечание по network_mode: host и доступу к localhost из Docker:
# Если ваши Python серверы (Auth, Game) запущены на хост-машине (например, `python -m auth_server.main`),
# а Prometheus/Grafana запускаются через этот docker-compose:
# - На Linux: `network_mode: host` для Prometheus/Grafana позволит им обращаться к `localhost:<port>` хоста.
# - На Windows/Mac: Используйте `host.docker.internal:<port>` в `prometheus.yml` вместо `localhost:<port>`.
#   `network_mode: host` не работает так же на Windows/Mac.
# Если все компоненты (включая ваши серверы) запускаются через Docker (например, отдельные `docker run` или другой docker-compose),
# то им нужна общая Docker-сеть для взаимодействия по именам сервисов.
